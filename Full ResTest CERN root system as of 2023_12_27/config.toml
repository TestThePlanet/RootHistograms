[ProcessCtrl]
config_file_version = 4  #For versioning. This must agree with main.py required_min_config_file_version, around line 11
do_git_pull = false
ask_on_git_diff = true #when true, uses git_diff_verbose
git_diff_verbosity = "info" #options: "verbose", "info" (default), "silent", tells how verbose to be when ask_on_git_diff = false 
open_main_eog = true
open_overlay_eog = true
copy_to_google_drive = true

[SinglePlotMode]
single_plot_mode_enabled = false #bool #Only make 1 plot, use for debugging. This also turns on the root editor.
which_one = "3M Aura 9210+" #string 

[Output]
print_level = 5
run_makeAllPlots_C = true
delete_preexisting_plots = true #only runs if run_makeAllPlots_C 
save_plots_enabled = true
save_with_HMFF_prefix = true
low_contrib_count_prefix = "L_"
X11_persistence  = true #bool 
plotDir = "plots" #NEW #plots_dir = "./plots"
plotDirGDrive = "/home/abarker/gapi/RootPlotOutput/histogram_by_sample" #NEW #plots_dir = "./plots"
plotDirUserHMean = "plots_hmean"
plotDirUserHMeanGDrive = "/home/abarker/gapi/RootPlotOutput/histogram_by_user_hmean"
#plotDirUserHMean = "plots"

[GoogleSheet]
redownload = true 
CSV_URL = "https://docs.google.com/spreadsheets/d/1arv8PObW_O4HMpScei3KAlt0zj1C55v_/gviz/tq?tqx=out:csv&sheet=Main"
output_TSV_file_name = "Main.tsv"
download_timeout_sec = 120
transphotos_dir_insides = "/home/abarker/gapi/.shared/transparent_photos_inside"
#transphotos_dir_insides = "./transparent_photos_inside"
transphotos_dir_fronts = "/home/abarker/gapi/.shared/transparent_photos_front"
#transphotos_dir_fronts = "./transparent_photos_front"
transparent_photos = "/home/abarker/gapi/.shared/_transparent_photos"
#transparent_photos = "./transparent_photos_front"

[Overlay]
runOverlays = true
delete_preexisting_overlays = true #only runs if runOverlays 
overlayDir = "_final" #output_dir = "./_final"
overlayDirGDrive = "/home/abarker/gapi/RootPlotOutput/_final"
image_size = "400x300" #overlay_size, pixels
top_location = "+1100+80" # 1000+50 pixels from top right corner
bottom_location = "+1100+350" # pixels from top right corner

[OverlayTR]
runOverlays = true
delete_preexisting_overlays = false #only runs if runOverlays 
overlayDir = "_final_TR" #output_dir = "./_final"
overlayDirGDrive = "/home/abarker/gapi/RootPlotOutput/_final_TR"
image_size = "512x384" #25%: 0.25*(2048x1536) pixels
#image_size = "410x308" #20%: 0.20*(2048x1536) pixels
top_location = "+1536+0" #+x+y pixels from top right corner = (1-0.25)*2048,0
#top_location = "+1638+0" #+x+y distance from top right corner #20%: (1-0.20)*2048,0

[Montage]
width = 10 # horizontal # of images in montage, aka # columns
height = -1 #negative or 0 will use all images and
max_height = 50 #max limit for the number of image rows.
tile_sizex = 1024 # pixels 
tile_sizey = 768  # pixels 
#picDir = "transparent_photos_front"
output_file_name = "montage.png"
output_file_name_GDrive = "/home/abarker/gapi/RootPlotOutput/montage.png"
usePlus0 = false #whether to use the "+0+0" syntax
eogAtEnd = true #whether to try and open the montage using the eog image viewer at the end
blacklist = ["FAKE-3M 9332+ LOT C203561.png","3M 8955J-DS2-01.png"]

[Analysis]
use_only_analysis_grade = true #bool
use_sizes = true #bool

[TSV]
tsv_filename = "Main.tsv" #string 
error_flag_file = "error.flag" #string 
skip_first_line_of_tsv_file = true #bool
maskname_tsv_column_index = 2 #unsigned int
exer1_tsv_column_index = 3 #unsigned int
headsize_tsv_column_index = 25 #unsigned int, column Z, headSize
number_of_exercises = 12 # int says that there are 12 exercises going from indicies [exer1_tsv_column_index..exer1_tsv_column_index + number_of_exercises)
analysis_grade_tsv_column_index = 20 #unsigned int, col U
testerID_tsv_column_index = 16 #unsigned int, col Q
date_tsv_column_index = 17 #uint, col R, "YYYY_MM_DD"
maxJawCm_tsv_column_index = 18 #uint, col S
protocol_tsv_column_index = 19 #uint, col T
queryResult_tsv_column_index = 21 #uint, col V

[Scoring]
make_scores = true
score_file = "scores.txt"
#score_file_GDrive = "/home/abarker/gapi/RootPlotOutput/scores.txt"
score_dir = "scores"
score_dir_GDrive = "/home/abarker/gapi/RootPlotOutput/scores"
explainScores = true
points_2xCrash25_2xOSHA_withGrimaceStored = 50
slabel_2xCrash25_2xOSHA_withGrimaceStored = "two Crash2.5 tests and two OSHA tests with grimace stored"
points_2xC25_1xOSHA_withGrimaceStored = 25
slabel_2xC25_1xOSHA_withGrimaceStored = "two Crash2.5 tests and an OSHA test with grimace stored"
points_2xC25 = 20 
slabel_2xC25 = "two Crash2.5 tests"
points_1xC25_2xOSHA_withGrimaceStored = 15 
slabel_1xC25_2xOSHA_withGrimaceStored = "a Crash2.5 tests and two OSHA tests with grimace stored"
points_1xCrash25_1xOSHA_withGrimaceStored = 12 
slabel_1xCrash25_1xOSHA_withGrimaceStored = "a Crash2.5 tests and an OSHA test with grimace stored"
points_2xOSHA_withGrimaceStored = 10 
slabel_2xOSHA_withGrimaceStored = "two OSHA tests with grimace stored"
points_1xCrash25 = 5
slabel_1xCrash25 = "a Crash2.5"
points_1xOSHA_withGrimaceStored = 2
slabel_1xOSHA_withGrimaceStored = "an OSHA with grimace stored"
points_1xCrash25short = 0.6 
slabel_1xCrash25short = "a Crash 2.5 short"
slabel_nada = "no qualifying Crash2.5 or OSHA tests"

[Histogram_Graphics]
sizePixelsX = 1660
sizePixelsY = 989
x_axis_title = "Exposure Reduction Factor               " #string 
y_axis_title = "Event Count" #string
ymax_setting = "auto_fit_each_histogram" #enum Ymax_state{ auto_fit_each_histogram, manual, global_full_auto, global_auto_with_manual_min_ymax}
histogram_ymax = 80.0 #float 

[HistTitle]
X1 = 0.16
Y1 = 0.94
X2 = 0.75
Y2 = 0.995

[TimeStamp]
X1 = 0.00120627  #line 1025
Y1 = 0.965768
X2 = 0.179131 
Y2 = 0.997925
prefixText = "TIL distribution as of " 
timeFormat = "%Y-%m-%d %H:%M" #getCurrentDateTime
suffixText = ""
textAlignment = 12

[Legend] #see line 887
HMSideSwitchThresh = 100.0
fontSize = 0.03 
lowX1 = 0.493969
Y1 = 0.764523 
lowX2 = 0.675513
Y2 = 0.892116 
highX1 = 0.136912
highX2 = 0.318456 #0.238239

markerSize = 20
histSize = 3
entryTextAll = "All sizes"
entryTextLg = "Known Lg Heads"
entryTextSm = "Known Sm Heads"
entryTextIQR = "Known IQR Heads"
colorAll = 600 #=kBlue
colorLg = 432 #=kCyan
colorSm = 616 #=kMagenta
colorIQR = 417 #=kGreen+1
fillStyleLg = 1001 #1001 = solid, #4050=translucent fill
fillStyleSm = 0 #0 = hollow
fillStyleIQR = 0 #0 = hollow
    #See "Fill Area style" https://root.cern.ch/doc/master/classTAttFill.html
sizeHistDrawOption = "samehist"

[Arrow]
useHarmMean = true
color = 1 #1 = kBlack #int 
size = 0.015
linewidth = 4
histmax_factor = 1.052631 # = 1/0.95 inflation over histogram max
ymin = 0.06 #0.74 = 74% of distance from axis 0 to histmax*histmax_factor 
length = 0.146 # percent of the distance to histmax*histmax_factor 
#ymax = (ymin + length
tipStyle = "|>"

[ArrowText]
label = "HMpop"
lowerNDC = 0.865145
upperNDC = 0.910788
leftOffset = -0.015
rightOffset = 0.15

#[Contributers]

#[LowCntWarning]

[ColorScheme]
#Histogram Gradient Color Selection Control
colorScheme = "LUT1" #ColorScheme 

#Background Color Scheme Selection Control
bkgColorScheme = "White" #BkgColorScheme OffWhite; 

[ColorScheme.LUT1]
red_hex = "#FF3355" #string
yellow_hex = "#FFAA00"  #string
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)
#Array length is determined by lut1_len = 8
r = [ 110, 180, 220, 230, 235, 240, 242, 242] #int #ilya
g = [ 230, 242, 242, 242, 242, 242, 242, 242] #int #ilya
b = [ 110, 180, 220, 230, 235, 240, 242, 242] #int #ilya
uses_harmean = true #false = uses median.
##also uses red_hex and yellow_hex

[ColorScheme.LUT2]
red_hex = "#F2F2F2" #string
yellow_hex = "#F2F2F2" #string
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)
#Array length is determined by lut2_len = 8
r = [ 242, 242, 242, 242, 242, 242, 242, 242] #int
g = [ 242, 242, 242, 242, 242, 242, 242, 242]
b = [ 242, 242, 242, 242, 242, 242, 242, 242] 
uses_harmean = true #false = uses median.

[ColorScheme.trafficLight]
red_hex = "#FF3355"
yellow_hex = "#FFAA00"
green_hex = "#26E600"
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)

[ColorScheme.grayGreen]
red_hex = "#C3C3C3" #string #7F7F7F
yellow_hex = "#C3C3C3"#string
green_hex = "#AFFFAB" #string
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)

[ColorScheme.trafficLightFaded]
red_hex = "#FF3355"   #string
yellow_hex = "#FFAA00" #string
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)
hue_green = 110.0 #float #overrides green_hex #120
value_green = 0.682 #float #overrides green_hex
percentile_hardness = 5.0 #float 
percentile_corner = 0.5 #float
graymax = 0.945 

[blackWhite]
red_hex = "#C3C3C3"   
yellow_hex = "#C3C3C3"
value_green = 0.82 #//0.274; //#D1D1D1 //darkest gray in the "green" region
hue_green = 120.0 #totally unimportant
percentile_hardness = 5.0
percentile_corner = 0.5
red_end = 1.0 #float TMath::Log10(10.)
yellow_end = 1.47712125472 #float TMath::Log10(30.)
graymax = 0.945 

[ColorScheme.blueberry]
blueness = 1.0 #float
graymax = 0.945 #float #0.961;//0.95f; 

[ColorScheme.darkMode]
red_hex_dark = "#FF3355" #string
yellow_hex_dark = "#FFAA00" #string
green_hex_dark = "#26E600" #string
value_green_dark = 0.682 #float #overrides green_hex_dark

[ColorScheme.Origional]
red.hex = "#FF3355"
red.r.256 = 255 # TColor::GetColor(255,51,85)
red.g.256 =  51
red.b.256 =  85
red.r.Root = 1.0 # TColor::GetColor(1.0f,0.2f, 0.3333f)
red.g.Root = 0.2
red.b.Root = 0.3333
red.h = 350
red.s =  80
red.v = 100    

light_red.hex = "#FFB3BF"
light_red.r.256 = 255 # rgb(255,179,191) 
light_red.g.256 = 179
light_red.b.256 = 191
light_red.r.Root = 1.0000000 # TColor::GetColor(1.0f,0.70196f,0.7490196f)
light_red.g.Root = 0.70196
light_red.b.Root = 0.7490196

yellow.hex = "#FFAA00"
yellow.r.256 = 255# TColor::GetColor(255,170,0)
yellow.g.256 = 170
yellow.b.256 = 0
yellow.r.Root = 1.0 # TColor::GetColor(1.0f,0.66667f,0.0f)
yellow.g.Root = 0.66667
yellow.b.Root = 0.0
yellow.h =  40
yellow.s = 100
yellow.v = 100    

light_yellow.hex = "#FFD480"
light_yellow.r.256 = 255 # TColor::GetColor(255,212,128) 
light_yellow.g.256 = 212
light_yellow.b.256 = 128
light_yellow.r.Root = 1.0 # TColor::GetColor(1.0f,0.83137f,0.5019608f)
light_yellow.g.Root = 0.83137
light_yellow.b.Root = 0.5019608

green.hex = "#26E600"
green.r.256 = 38 # TColor::GetColor(0.1490196f,0.9019608f,0.0f)
green.g.256 = 230
green.b.256 = 0
green.r.Root = 0.1490196 # TColor::GetColor(0.1490196f,0.9019608f,0.0f)
green.g.Root = 0.9019608
green.b.Root = 0.0
green.h = 110
green.s = 100
green.v = 90     

light_green.hex = "#95FF80"
light_green.r.256 = 149 # TColor::GetColor(149,255,128)
light_green.g.256 = 255
light_green.b.256 = 128
light_green.r.Root = 0.5843137 # TColor::GetColor(0.5843137f,1.0f,0.5019608f)
light_green.g.Root = 1.0
light_green.b.Root = 0.5019608

#[ColorScheme.sigmoid]
#hue_red = -10.0 #float 
#hue_yellow = 40.f #float
#hue_green = 110.f #float
#hue_transition_hardness = 0.36f  #float
#SigmoidOption hue_func = S_abs

#satur_green = 0.15f #float
#satur_at_center = 0.7f #float
#satur_center_percential = 0.5f #float
#satur_transition_hardness = 6.0f #float

#value_red = 1.0f #float
#value_green = 0.9f #float
#value_transition_center = 1.17f #1.17 = log10(25) float
#value_transition_hardness = 8.0 #float
#SigmoidOption value_func = S_tanh
